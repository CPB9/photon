module usm

enum State {
    Empty       = 0,
    Proccessing = 1,
    Executed    = 2,
    NotExecuted = 4,
}

enum Frames {
    BuildStateFrame = 1,
    BuildLogOutputFrame,
    BuildLogErrorsFrame,
    SystemInfoFrame,
    CurrentAppFrame,
    CurrentAppOutputFrame,
}

struct BuildState {
    unpackState     : State,
    buildState      : State,
    installState    : State,
    uninstallState  : State,
}

type Str        = &[char;255];
type StrList    = &[char;768];

struct SystemInfo {
    appsList        : StrList,
}
struct LogMessage {
    identification  : u16,
    fragmentOffset  : u16,
    data            : StrList,
}

enum ApplicationState {
    NotRunning  = 0,
    Starting    = 1,
    Running     = 2,
    Finished    = 3,
    Crashed     = 4,
}

struct CurrentApplication {
    name         : Str,
    state        : ApplicationState,
    pid          : varuint,
}

component {
    parameters {
        buildState      : BuildState,
        buildLogOutput  : LogMessage,
        buildLogErrors  : LogMessage,
        systemInfo      : SystemInfo,
        currentApp      : CurrentApplication,
        currentAppOutput: LogMessage,
    }

    statuses {
        [buildState         , 1, false]: {buildState},
        [buildLogOutput     , 1, false]: {buildLogOutput},
        [buildLogErrors     , 1, false]: {buildLogErrors},
        [systemInfo         , 1, false]: {systemInfo},
        [currentApp         , 1, false]: {currentApp},
        [currentAppOutput   , 1, false]: {currentAppOutput},
    }

    events {
        [logMessage, true]: { level: u8, source: u8, text: StrList }
    }

    commands {
        fn requestStatus(statusCode: u8)

        fn getFile(fileId: varuint)
        fn unpackFile()
        fn buildTarget()
        fn installTarget()

        fn uninstallApplication(appName : Str)

        fn runApplication(appNameWithArguments : StrList)
        fn stopApplication(appName : Str)
        fn killApplication(appName : Str)
    }

    impl {
        fn init()
        fn tick()
    }
}
