/// SDK module
module usm

enum LanguageCodes {
    LanguageCpp     = 1,
    LanguagePython  = 2,
}

enum ApplicationFlags {
    AutolaunchFlag  = 1,
    RunningFlag     = 64,
}

enum State {
    Empty       = 0,
    Proccessing = 1,
    Executed    = 2,
    NotExecuted = 4,
}

enum Frames {
    BuildStateFrame         = 1,
    BuildLogOutputFrame     = 2,
    BuildLogErrorsFrame     = 3,
    SystemInfoFrame         = 4,
    CurrentAppFrame         = 5,
    ProjectInfoFrame        = 6,
    CurrentAppOutputFrame   = 7,
}

struct BuildState {
    language        : LanguageCodes,
    unpackState     : State,
    buildState      : State,
    installState    : State,
    uninstallState  : State,
}

/// Text data. If first byte is 0 text was compressed by z-lib
type TextLine       = &[char;255];
/// Array of text strings with '\n' delimiters. If first byte is 0 text was compressed by z-lib
type TextLinesList  = &[char;768];
/// Date in Unix-time seconds
type TimeStamp      = i64;

struct SystemInfo {
    language        : LanguageCodes,
    appsList        : TextLinesList,
    appsFlags       : &[u8;384]
}
struct LogMessage {
    ///
    language        : LanguageCodes,
    /// Unique datagram code
    identification  : u16,
    /// Fragment offset
    fragmentOffset  : u16,
    /// Text with '\n' delimiters (if first byte is zero text was compressed by z-lib)
    data            : TextLinesList,
}

enum ApplicationState {
    NotRunning  = 0,
    Starting    = 1,
    Running     = 2,
    Finished    = 3,
    Crashed     = 4,
}

struct CurrentApplication {
    language     : LanguageCodes,
    name         : TextLine,
    state        : ApplicationState,
    pid          : i64,
}
/// Info about installed project with specified name
struct ProjectInfo {
    language        : LanguageCodes,
    /// Project name
    name            : TextLine,
    /// Installed files
    filesList       : TextLinesList,
    /// Last project update date
    updated         : TimeStamp,
}

component {
    parameters {
        buildState  : BuildState,
        systemInfo  : SystemInfo,
        currentApp  : CurrentApplication,
        projectInfo : ProjectInfo,
    }

    statuses {
        [buildState,    1, false]: {buildState},
        [systemInfo,    1, false]: {systemInfo},
        [currentApp,    1, false]: {currentApp},
        [projectInfo,   1, false]: {projectInfo},
    }

    events {
        [buildLogOutput,    true]: {output : LogMessage},
        [buildLogErrors,    true]: {errors : LogMessage},
        [currentAppOutput,  true]: {output : LogMessage},
        [currentAppStatus,  true]: {output : LogMessage},
        [appRemoving,       true]: {state : State, project : TextLine, files : LogMessage},
    }

    commands {
        fn requestStatus(language : LanguageCodes, statusCode: u8)

        fn getFile(language : LanguageCodes, fileId: varuint)
        fn unpackFile(language : LanguageCodes)
        fn buildTarget(language : LanguageCodes)
        fn installTarget(language : LanguageCodes)
        fn stopBuildProcess(language : LanguageCodes, kill : bool)

        fn uninstallApplication(language : LanguageCodes, appName : TextLine)

        fn runApplication(language : LanguageCodes, appNameWithArguments : TextLinesList)
        fn stopApplication(language : LanguageCodes, appName : TextLine)
        fn killApplication(language : LanguageCodes, appName : TextLine)

        fn requestApplicationStatus(language : LanguageCodes, appName : TextLine)
    }

    impl {
        fn init()
        fn tick()
    }
}
