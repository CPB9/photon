module pvu

import core::{Error, Reader, Writer}
import clk::{Tick}
import exc::{DataHeader}

struct Script {
    data: Reader,
    isSleeping: bool,
    isFinished: bool,
    sleepUntil: Tick,
}

const SCRIPT_NUM: usize = 10;
const TOTAL_SCRIPTS_SIZE: usize = 2048;

enum ExecutionMode {
    None,
    CmdArray,
    Script,
}

component {
    parameters {
        numScripts: usize,
        totalScriptsSize: usize,
        currentScript: *mut Script,
        currentHeader: *const DataHeader,
    }

    impl {
        fn init()
        fn tick()
        fn addScript(src: *mut Reader) -> Error
        fn executeFrom(header: *const DataHeader, src: *mut Reader, results: *mut Writer) -> Error
        fn currentHeader() -> *const DataHeader
    }

    commands {
        fn sleepFor(delta: Tick)
        fn sleepUntil(time: Tick)
    }
}
