module exc

import core::{Reader, Writer, Error, Address, Time, Generator, RingBuf}
import clk::{Tick}

/// 0x9c3e
const STREAM_SEPARATOR : u16 = 39998;

enum StreamDirection {
    Uplink = 0,
    Downlink = 1,
}

enum StreamType {
    Firmware = 0,
    Cmd = 1,
    Telem = 2,
    User = 3,
}

enum PacketType {
    Unreliable = 0,
    Reliable = 1,
    Receipt = 2,
}

enum ReceiptType {
    Ok = 0,
    PacketError = 1,
    PayloadError = 2,
    CounterCorrection = 3,
}

struct ReceiptPacket {
    recievedCounter: u16,
    recievedChecksum: u16,
    timeRecieved: Time,
}

impl ReceiptPacket {
    fn encode(&mut self, dest: *mut Writer) -> Error
}

struct DataHeader {
    srcAddress: varuint,
    destAddress: varuint,
    streamDirection: StreamDirection,
    packetType: PacketType,
    streamType: StreamType,
    counter: u16,
    time: Tick,
}

struct Msg {
    address: u32,
    data: *const u8,
    size: usize,
}

struct PacketRequest {
    gen: Generator,
    data: *mut void,
    header: DataHeader,
}

type StreamHandler = &Fn(*const DataHeader, *mut Reader, *mut Writer) -> Error;

struct StreamState {
    currentReliableDownlinkCounter: u16,
    currentReliableUplinkCounter: u16,
    currentUnreliableDownlinkCounter: u16,
    expectedReliableUplinkCounter: u16,
    expectedUnreliableUplinkCounter: u16,
}

struct Device {
    address: varuint,
    incomingHeader: DataHeader,

    request: PacketRequest,
    hasDataQueued: bool,
    dataSize: usize,

    inRingBuf: RingBuf,
    inRingBufData: [u8; 1024],
    outData: [u8; 512],

    fwtStream: StreamState,
    cmdStream: StreamState,
    telemStream: StreamState,
    userStream: StreamState,
    isGroundControl: bool,
}

impl Device {
    fn initGroundControl(&mut self, address: varuint)
    fn initUav(&mut self, address: varuint)
    fn acceptInput(&mut self, src: *const void, size: usize)
    fn genNextPacket(&mut self, dest: *mut Writer) -> Error
    fn queueCustomCmdPacket(&mut self, data: *mut void, gen: Generator) -> Error
}

enum ClientError {
    Ok = 0,
    NoDescriptorsLeft = 1,
}

component {
    parameters {
        devices: &[Device; 8],
        address: varuint,
    }

    statuses {
    }

    impl {
        fn init()
        fn tick()

        fn selfAddress() -> varuint
        fn setAddress(address: varuint)
        fn registerGroundControl(id: varuint, device: *mut *mut Device) -> ClientError
        fn registerUav(id: varuint, device: *mut *mut Device) -> ClientError
        fn removeClient(id: varuint) -> ClientError
    }

    commands {
        fn setAddress(address: varuint)
    }
}
