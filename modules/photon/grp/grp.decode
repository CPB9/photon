module grp

import core::{Reader, Writer, Error, Option}

type UavId = varuint;
type TermId = varuint;
type GrpId = varuint;
type EntryId = varuint;
type Index = varuint;
type Time = varuint;

enum EntryKind {
    Normal = 1,
    AddNonVotingNode = 2,
    AddNode = 3,
    DemoteNode = 4,
    RemoveNode = 5,
}

struct LogEntry {
    term: TermId,
    entryId: EntryId,
    kind: EntryKind,
    node: Option<UavId>,
    data: &[u8; 500],
}

enum ReqErr {
    NotLeader = 1,
    NodeUnknown = 2,
    OneVotingChangeOnly = 3,
    Unknown = 4,
    GroupIncorrect = 5,
}

struct ReqCfgRep {
    err: Option<ReqErr>,
    term: TermId,
    id: EntryId,
    idx: Index
}

enum MemberState {
    Leader = 0,
    Candidate = 1,
    Follower = 2,
}

struct Timeouts {
    ping: Time,
    election: Time,
    election_rand: Time,
}

component {
    parameters {
        group: Option<GrpId>,
        members: &[UavId; 10],
        leader: Option<UavId>,
        state: MemberState,
        term: TermId,
        commit: Index,
        lastLogIdx: Index,
        lastLogTerm: TermId,
        votedFor: Option<UavId>,
        timeouts: Timeouts,
        timeout_elapsed: Time
    }

    statuses {
        [all, 0, false]: {group, leader, term, state, commit, lastLogIdx, lastLogTerm, votedFor, members, timeout_elapsed, timeouts},
        [leader, 1, false]: {group, leader, term},
        [members, 2, false]: {group, leader, term, members},
        [elect, 3, false]: {group, leader, state, term, commit, lastLogIdx, lastLogTerm, votedFor}
    }

    impl {
        fn init()
        fn tick()
        fn genRaftData(data: *mut void, writer: *mut Writer) -> Error
        fn addSharer(compNum: u8, generator: &Fn(*mut Writer), receiver: &Fn(UavId, *mut Reader))
        fn removeSharer(compNum: u8)
        fn isLeader() -> bool
    }

    commands {
        fn setTimeouts(group: GrpId, ping: Time, lost: varuint)
        fn createGroup(group: GrpId, members: &[UavId; 10])
        fn deleteGroup(group: GrpId)
        fn addMember(group: GrpId, member: UavId) -> ReqCfgRep
        fn removeMember(group: GrpId, member: UavId) -> ReqCfgRep
        fn joinGroup(group: GrpId, members: &[UavId; 10]) -> ReqCfgRep
        fn execute(group: GrpId, cmd: &[u8; 500]) -> ReqCfgRep
        fn shareMsgs(group: GrpId, from: UavId, cmd: &[u8; 500])

        fn reqVote(group: GrpId, term: TermId, lastLogIdx: Index, lastLogTerm: TermId)
        fn reqVoteRep(group: GrpId, term: TermId, vote: bool)
        fn reqAppendEntry(group: GrpId, term: TermId, prevLogIdx: Index, prevLogTerm: TermId, leaderCommit: Index, entries: &[LogEntry; 10])
        fn reqAppendEntryRep(group: GrpId, term: TermId, success: bool, currentIdx: Index, firstIdx: Index)
    }
}
