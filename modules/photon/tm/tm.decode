module tm

import core::{Writer, Error, Generator, StatelessGenerator}

struct MessageDesc {
    func: StatelessGenerator,
    priority: i16,
    interest: i16,
    isEnabled: bool,
    compNum: u8,
    msgNum: u8,
}

struct StatusMessage {
    compNum: u8,
    msgNum: u8,
}

impl StatusMessage {
    fn encode(&mut self, gen: Generator, data: *mut void, dest: *mut Writer) -> Error
}

component {
    variables {
        lostEvents: varuint,
        storedEvents: varuint,
        generatedEvents: varuint,
        currentDesc: u32,
        allowedMsgCount: u32,
        onceRequestsNum: u16,
    }

    statuses {
        [all, 0, false]: {lostEvents, storedEvents, generatedEvents, currentDesc, allowedMsgCount, onceRequestsNum},
    }

    impl {
        fn init()
        fn tick()
        fn collectMessages(dest: *mut Writer) -> Error
        fn hasMessages() -> bool
        fn beginEventMsg(compNum: u8, msgNum: u8) -> *mut Writer
        fn endEventMsg()
        fn setStatusEnabled(compNum: u8, msgNum: u8, isEnabled: bool) -> Error
        fn requestStatusOnce(compNum: u8, msgNum: u8) -> Error
    }

    commands {
        fn setStatusEnabled(compNum: u8, msgNum: u8, isEnabled: bool)
        fn requestStatusOnce(compNum: u8, msgNum: u8)
    }
}
