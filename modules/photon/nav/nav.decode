module nav

import core::{Option}

struct LatLon {
    latitude: f64,
    longitude: f64,
}

struct Orientation {
    heading: f64,
    pitch: f64,
    roll: f64,
}

struct Position {
    latLon: LatLon,
    altitude: f64,
}

struct Vec3 {
    x: f64,
    y: f64,
    z: f64,
}

struct FormationEntry {
    pos: Vec3,
    id: varuint
}

variant Action {
    None,
    Sleep { timeout: varuint },
    Formation { positions: &[FormationEntry; 20] },
    Reynolds,
    Snake,
    Loop,
    Target,
}

struct Waypoint {
    position: Position,
    speed: Option<f64>,
    action: Action,
}

enum GpsFixType {
    NoGps = 0,
    NoFix = 1,
    Fix2D = 2,
    Fix3D = 3,
    DGps = 4,
    Single = 5,
    PsrDiff = 6,
    L1Float = 7,
    L1Int = 8,
    Static = 9,
}

struct GpsState {
    fixType : GpsFixType,
    satellitesVisible : u8
}

type RouteId = varuint;
type PointId = varuint;

struct RouteInfo {
    id: RouteId,
    size: varuint,
    maxSize: varuint,
    activePoint: Option<PointId>,
    isClosed: bool,
    isInverted: bool,
    isEditing: bool,
}

struct AllRoutesInfo {
    info: &[RouteInfo; 10],
    activeRoute: Option<RouteId>,
}

component {
    variables {
        latLon: LatLon,
        orientation: Orientation,
        altitude: f64,
        relativeAltitude: Option<f64>,
        velocity: Vec3,
        gpsState: GpsState,
    }

    statuses {
        [all, 0, true]: {latLon, orientation, altitude, relativeAltitude, velocity},
        [gps, 0, true]: {gpsState},
    }

    commands {
        fn beginRoute(routeId: RouteId, size: varuint)
        fn clearRoute(routeId: RouteId)
        fn setRoutePoint(routeId: RouteId, pointIndex: PointId, waypoint: Waypoint)
        fn endRoute(routeId: RouteId)
        fn setActiveRoute(routeId: Option<RouteId>)
        fn setRouteActivePoint(routeId: RouteId, pointIndex: Option<PointId>)
        fn setRouteInverted(routeId: RouteId, isInverted: bool)
        fn setRouteClosed(routeId: RouteId, isClosed: bool)
        fn getRouteInfo(routeId: RouteId) -> RouteInfo
        fn getRoutePoint(routeId: RouteId, pointIndex: PointId) -> Waypoint
        fn getRoutesInfo() -> AllRoutesInfo
    }

    impl {
        fn init()
        fn tick()
    }
}
