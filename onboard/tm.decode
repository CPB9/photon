module tm

import core::{Writer, Error, Generator}

struct MessageDesc {
    func: &Fn(*mut Writer) -> Error,
    priority: i16,
    interest: i16,
    isAllowed: bool,
    compNum : u8,
    msgNum : u8,
}

struct StatusMessage {
    compNum: u8,
    msgNum: u8,
}

impl StatusMessage {
    fn encode(&mut self, gen: Generator, data: *mut void, dest: *mut Writer) -> Error
}

component {
    parameters {
        currentMsg: u32,
        allowedMsgCount: u32,
        currentStatusMsg: StatusMessage,
        msgs: &[MessageDesc],
    }

    statuses {
        0: currentMsg,
        1: { currentMsg, allowedMsgCount },
        3: msgs[..].isAllowed
    }

    impl {
        fn init()
        fn collectMessages(dest: *mut Writer) -> Error
        fn hasMessages() -> bool
    }
}
