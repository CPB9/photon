module core

enum Error {
    Ok = 0,
    PacketNotFound = 1,
    InvalidBerLength = 2,
    UnexpectedEndOfBerStream = 3,
    NotEnoughSpace = 4,
    NotEnoughData = 5,
    InvalidSize = 6,
    InvalidDataHeader = 7,
    InvalidPacketHeader = 8,
    InvalidDataSize = 9,
    InvalidAddressType = 10,
    InvalidReservedFieldValue = 11,
    InvalidStreamType = 12,
    InvalidErrorControlType = 13,
    InvalidWindowSize = 14,
    InvalidChecksum = 15,
    InvalidSequenceCounter = 16,
    InvalidTimeValue = 17,
    EventIsDenied = 18,
    InvalidTimeType = 19,

    InvalidComponentId = 20,
    InvalidCommandId = 21,
    InvalidMessageId = 22,
    InvalidValue = 23,
}

struct Reader {
    current: *const u8,
    start: *const u8,
    end: *const u8,
}

impl Reader {
    fn init(&mut self, data: *const void, size: usize)
    fn isAtEnd(&self) -> bool
    fn currentPtr(&self) -> *const u8
    fn readableSize(&self) -> usize
    fn skip(&mut self, size: usize)
    fn read(&mut self, dest: *mut void, size: usize)

    fn peekU8(&self) -> u8
    fn peekU16Be(&self) -> u16

    fn readU8(&mut self) -> u8

    fn readU16Be(&mut self) -> u16
    fn readU32Be(&mut self) -> u32
    fn readU64Be(&mut self) -> u64

    fn readU16Le(&mut self) -> u16
    fn readU32Le(&mut self) -> u32
    fn readU64Le(&mut self) -> u64

    fn readUSizeLe(&mut self) -> usize
    fn readUSizeBe(&mut self) -> usize

    fn readPtrLe(&mut self) -> *mut void
    fn readPtrBe(&mut self) -> *mut void

    fn readVaruint(&mut self, dest: *mut varuint) -> Error
    fn readVarint(&mut self, dest: *mut varint) -> Error

    fn slice(&mut self, length: usize, dest: *mut Reader)
    fn sliceToEnd(&mut self, dest: *mut Reader)
}

struct Writer {
    current: *mut u8,
    start: *mut u8,
    end: *const u8,
}

impl Writer {
    fn init(&mut self, dest: *mut void, size: usize)

    fn currentPtr(&self) -> *mut u8
    fn isAtEnd(&self) -> bool
    fn writableSize(&self) -> usize

    fn setCurrentPtr(&mut self, ptr: *mut u8)
    fn sliceFromBack(&mut self, length: usize, dest: *mut Writer)

    fn write(&mut self, src: *const void, size: usize)
    fn skip(&mut self, size: usize)

    fn writeU8(&mut self, value: u8)

    fn writeU16Be(&mut self, value: u16)
    fn writeU32Be(&mut self, value: u32)
    fn writeU64Be(&mut self, value: u64)

    fn writeU16Le(&mut self, value: u16)
    fn writeU32Le(&mut self, value: u32)
    fn writeU64Le(&mut self, value: u64)

    fn writeUSizeLe(&mut self, value: usize)
    fn writeUSizeBe(&mut self, value: usize)

    fn writePtrLe(&mut self, value: *const void)
    fn writePtrBe(&mut self, value: *const void)

    fn writeVaruint(&mut self, value: varuint) -> Error
    fn writeVarint(&mut self, value: varint) -> Error
}

type Generator = &Fn(*mut void, *mut Writer) -> Error;

variant Time {
    Secs { seconds: u32 },
    SecsMsecs { seconds: u32, milliseconds: u16 },
    SecsUsecs { seconds: u32, microseconds: u32 },
    SecsNsecs { seconds: u32, nanoseconds: u32 },
}

enum StreamType {
    Commands = 0,
    Telemetry = 1,
}

enum ErrorControlType {
    Crc16 = 1,
    ReedSolomon = 2,
}

variant Address {
    Simple {
        srcAddress: varuint,
        destAddress: varuint,
    },
    Group {
        srcAddress: varuint,
        srcComponentNumber: varuint,
        destComponentNumber: varuint,
        destAddress: varuint,
        srcGroup: varuint,
        destGroup: varuint,
    },
    Network {
        srcAddress: varuint,
        srcComponentNumber: varuint,
        destComponentNumber: varuint,
        destAddress: varuint,
    },
    Multicast {
        srcAddress: varuint,
        srcComponentAddress: varuint,
        destComponentAddress: varuint
    },
}

struct ChannelPacketHeader {
    streamType: StreamType,
    errorControlType: ErrorControlType,
    windowSize: varuint,
    sequenceCounter: varuint,
}

struct ExchangePacketHeader {
    streamType: StreamType,
    errorControlType: ErrorControlType,
    windowSize: varuint,
    sequenceCounter: varuint,
}

struct ReceiptPacketHeader {
    streamType: StreamType,
    errorControlType: ErrorControlType,
    lastSequenceCounter: varuint,
}

struct CmdHeader {
    componentNumber: varuint,
    commandNumber: varuint,
}


struct RingBuf {
    data: *mut u8,
    readOffset: usize,
    writeOffset: usize,
    size: usize,
    freeSpace: usize,
}

impl RingBuf {
    fn init(&mut self, data: *mut void, size: usize)
    fn peek(&self, dest: *mut void, size: usize, offset: usize)
    fn peekU8(&self, offset: usize) -> u8
    fn read(&mut self, dest: *mut void, size: usize)
    fn currentReadPtr(&self) -> *const u8
    fn readableSize(&self) -> usize
    fn linearReadableSize(&self) -> usize
    fn erase(&mut self, size: usize)

    fn write(&mut self, src: *const void, size: usize)
    fn linearWritableSize(&self) -> usize
    fn currentWritePtr(&self) -> *mut u8
    fn advance(&mut self, size: usize)
}

struct StatusMessageHeader {
    segmentNumber: varuint,
    maxSegmentNumber: varuint,
    componentNumber: varuint,
    messageNumber: varuint,
}

struct EventMessageHeader {
    componentNumber: varuint,
    messageNumber: varuint,
    eventNumber: varuint,
    timestamp: Time
}

struct MessageDesc {
    priority: u32,
    isAllowed: bool,
}
