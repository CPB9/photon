module exc

import core::{Writer, Error, Address, Time, Generator, RingBuf}

const STREAM_SEPARATOR : u16 = 39998; // 0x9c3e

enum PacketType {
    Firmware = 0,
    Data = 1,
    Receipt = 2,
}

enum StreamType {
    Reliable = 0,
    Unreliable = 1,
}

enum DataType {
    Commands = 0,
    Telemetry = 1,
}

struct DataPacket {
    streamType: StreamType,
    counter: u16,
    dataType: DataType,
    address: Address,
    time: Time,
}

impl DataPacket {
    fn encode(&mut self, gen: Generator, data: *mut void, dest: *mut Writer) -> Error
}

struct ReceiptPacket {
    recievedCounter: u16,
    recievedChecksum: u16,
    timeRecieved: Time,
}

impl ReceiptPacket {
    fn encode(&mut self, dest: *mut Writer) -> Error
}

component {
    parameters {
        outCounter: u16,
        outStream: RingBuf,
        outStreamData: [u8; 1024],
        inCounter: u16,
        inStream: RingBuf,
        inStreamData: [u8; 1024],
    }

    impl {
        fn init()
        fn acceptInput(src: *const void, size: usize)
        fn genOutput(dest: *mut void, size: usize) -> usize
    }
}
